{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>XConn provides a powerful and easy-to-use WAMP v2 client and router for Dart. It is designed to be cross-platform, making it equally useful in both pure Dart applications and Flutter projects, offering cross-platform compatibility across desktop, web, and mobile environments.</p> <p>For examples and project code, visit the GitHub repository.</p> <p>For installation, see Installation section.</p> <p>For usage, see Usage section.</p> <p>For questions or issues, please visit our GitHub repository and feel free to open an issue.</p>"},{"location":"installation/","title":"Installation","text":"<p>Use this package as a library.</p>"},{"location":"installation/#add-dependency","title":"Add Dependency","text":"<p>To add this package to your project, run the appropriate command for your environment:</p>"},{"location":"installation/#with-dart","title":"With Dart","text":"<pre><code>dart pub add xconn\n</code></pre>"},{"location":"installation/#with-flutter","title":"With Flutter","text":"<pre><code>flutter pub add xconn\n</code></pre> <p>This will add a line like this to your package's pubspec.yaml (and run an implicit dart pub get):</p> <pre><code>dependencies:\n  xconn: ^0.1.0\n</code></pre> <p>Alternatively, your editor might support <code>dart pub get</code> or <code>flutter pub get</code>. Check the docs for your editor to learn more.</p>"},{"location":"installation/#import-it","title":"Import it","text":"<p>Now in your Dart code, you can use:</p> <pre><code>import 'package:xconn/xconn.dart';\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>XConn provides a versatile WAMP v2 client and router for Dart applications. Below are examples demonstrating various functionalities:</p>"},{"location":"usage/#client","title":"Client","text":""},{"location":"usage/#creating-a-client","title":"Creating a Client","text":"<p>To create a client and connect to a WAMP server:</p> <pre><code>import \"package:xconn/xconn.dart\";\n\nvoid main() async {\n  var client = Client();\n  var session = await client.connect(\"ws://localhost:8080/ws\", \"realm1\");\n}\n</code></pre> <p>Once the session is established, you can perform WAMP actions. Below are examples of all 4 WAMP operations:</p>"},{"location":"usage/#subscribe-to-a-topic","title":"Subscribe to a topic","text":"<p>To subscribe to a topic and handle events:</p> <pre><code>void exampleSubscribe(Session session) async {\n  var subscription = await session.subscribe(\"io.xconn.example\", eventHandler);\n  print(\"Subscribed to topic io.xconn.example\");\n}\n\nvoid eventHandler(Event event) {\n  print(\"Received Event: args=${event.args}, kwargs=${event.kwargs}, details=${event.details}\");\n}\n</code></pre>"},{"location":"usage/#publish-to-a-topic","title":"Publish to a topic","text":"<p>To publish messages to a topic:</p> <pre><code>void examplePublish(Session session) async {\n  await session.publish(\"io.xconn.example\", args: [\"Hello World!\", 100], kwargs: {\"xconn\": \"dart\"});\n  print(\"Published to topic io.xconn.example\");\n}\n</code></pre>"},{"location":"usage/#register-a-procedure","title":"Register a procedure","text":"<p>To register a procedure:</p> <pre><code>void exampleRegister(Session session) async {\n  var registration = await session.register(\"io.xconn.echo\", invocationHandler);\n  print(\"Registered procedure io.xconn.echo\");\n}\n\nResult invocationHandler(Invocation invocation) {\n  return Result(args: invocation.args, kwargs: invocation.kwargs, details: invocation.details);\n}\n</code></pre>"},{"location":"usage/#call-a-procedure","title":"Call a procedure","text":"<p>To call a procedure:</p> <pre><code>void exampleCall(Session session) async {\n  var result = await session.call(\"io.xconn.echo\", args: [\"Hello World!\"], kwargs: {\"number\": 100});\n  print(\"Call result: args=${result.args}, kwargs=${result.kwargs}, details=${result.details}\");\n}\n</code></pre>"},{"location":"usage/#authentication","title":"Authentication","text":"<p>Authentication is straightforward. Simply create the object of the desired authenticator and pass it to the Client.</p> <p>Ticket Auth</p> <pre><code>void main() async {\n  var ticketAuthenticator = TicketAuthenticator(ticket, authid);\n  var client = Client(authenticator: ticketAuthenticator);\n  var session = await client.connect(\"ws://localhost:8080/ws\", \"realm1\");\n}\n</code></pre> <p>Challenge Response Auth</p> <pre><code>void main() async {\n  var craAuthenticator = WAMPCRAAuthenticator(secret, authid);\n  var client = Client(authenticator: craAuthenticator);\n  var session = await client.connect(\"ws://localhost:8080/ws\", \"realm1\");\n}\n</code></pre> <p>Cryptosign Auth</p> <pre><code>void main() async {\n  var cryptosignAuthenticator = CryptoSignAuthenticator(privateKey, authid);\n  var client = Client(authenticator: cryptosignAuthenticator);\n  var session = await client.connect(\"ws://localhost:8080/ws\", \"realm1\");\n}\n</code></pre>"},{"location":"usage/#serializers","title":"Serializers","text":"<p>XConn supports various serializers for different data formats. To use, create an instance of your chosen serializer and pass it to the client.</p> <p>JSON Serializer</p> <pre><code>void main() async {\n  var jsonSerializer = JSONSerializer();\n  var client = Client(serializer: jsonSerializer);\n  var session = await client.connect(\"ws://localhost:8080/ws\", \"realm1\");\n}\n</code></pre> <p>CBOR Serializer</p> <pre><code>void main() async {\n  var cborSerializer = CBORSerializer();\n  var client = Client(serializer: cborSerializer);\n  var session = await client.connect(\"ws://localhost:8080/ws\", \"realm1\");\n}\n</code></pre> <p>MsgPack Serializer</p> <pre><code>void main() async {\n  var msgPackSerializer = MsgPackSerializer();\n  var client = Client(serializer: msgPackSerializer);\n  var session = await client.connect(\"ws://localhost:8080/ws\", \"realm1\");\n}\n</code></pre> <p>For more detailed examples or usage, refer to the examples folder of the project.</p>"},{"location":"usage/#server","title":"Server","text":""},{"location":"usage/#setting-up-a-basic-server","title":"Setting Up a Basic Server","text":"<p>Setting up a basic server is straightforward:</p> <pre><code>import 'package:xconn/xconn.dart';\n\nvoid main() async {\n  var router = Router()\n    ..addRealm('realm1');\n  var server = Server(router);\n  await server.start('localhost', 8080);\n}\n</code></pre>"},{"location":"usage/#setting-up-server-with-authenticator","title":"Setting Up Server with Authenticator","text":"<p>Here's a simple example of a server authenticator and how to pass it to the server:</p> <pre><code>class ServerAuthenticator extends IServerAuthenticator {\n  @override\n  Response authenticate(Request request) {\n    if (request is AnonymousRequest) {\n      // Handle anonymous request\n    } else if (request is TicketRequest) {\n      // Handle ticket request\n    } else if (request is WAMPCRARequest) {\n      // Handle wampcra request\n    } else if (request is CryptoSignRequest) {\n      // Handle cryptosign request\n    }\n\n    throw Exception(\"unknown authmethod\");\n  }\n\n  @override\n  List&lt;String&gt; methods() {\n    return [\"anonymous\", \"ticket\", \"wampcra\", \"cryptosign\"];\n  }\n}\n\nvoid main() async {\n  var router = Router()\n    ..addRealm('realm1');\n  var server = Server(router);\n\n  // Start the server with the custom authenticator\n  await server.start('localhost', 8080, authenticator: ServerAuthenticator());\n}\n</code></pre> <p>For more advanced usage, such as integrating an authenticator, refer to the sample tool available in the bin folder of the project.</p>"}]}